<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mechoori.web.repository.RestaurantRepository">
   <select id="findById" resultType="Restaurant">
      select * 
      from restaurant
      where id = #{restaurantId}
   </select>

   <select id="findViewById" resultType="RestaurantView">
      <if test="memberId == null">
         select * 
         from restaurant_view
         where id = #{restaurantId}
      </if>
      <if test="memberId != null">
         select rv.*, IF(rl.member_id is not null, 1, 0) `like`
         from restaurant_view rv
         left join restaurant_like rl on rv.id = rl.restaurant_id and rl.member_id = #{memberId}
         where rv.id = #{restaurantId}
      </if>
   </select>

   <select id="findAll" resultType="Restaurant">
      select *
      from restaurant
      <trim prefix="where" prefixOverrides="AND|OR">
         <if test="categoryId != null">
            category_id = #{categoryId};
         </if>
         <if test="query != null">
            name like '%${query}%'
         </if>
      </trim>
      <if test="page != null">
         limit #{page}, #{size}
      </if>
   </select>

	<select id="findRestaurantViewAll" resultType="RestaurantView">
		<if test="memberId == null">
			select
				r.*,
				0 `like`,
				0 rate
			from restaurant_view r
		</if>
		<if test="memberId != null">
			SELECT r.*,
				IF(rl.restaurant_id IS NOT NULL, 1, 0) AS `like`,
				IFNULL(rt.rate_count, 0) AS rate
			FROM restaurant_view r
			LEFT JOIN (
				SELECT
					DISTINCT restaurant_id
				FROM restaurant_like
				WHERE member_id = #{memberId}
			) rl ON r.id = rl.restaurant_id
			LEFT JOIN (
				SELECT
					menu.restaurant_id,
					COUNT(rate.member_id) AS rate_count
				FROM menu
				LEFT JOIN rate ON menu.id = rate.menu_id AND rate.member_id = #{memberId}
				GROUP BY menu.restaurant_id) rt ON r.id = rt.restaurant_id
		</if>
		<trim prefix="where" prefixOverrides="AND|OR">
			<if test="topCategoryId != null">
				r.top_category_id = #{topCategoryId}
			</if>
			<if test="categoryId != null">
				r.category_id = #{categoryId}
			</if>
			<if test="query != null">
				(
					r.name LIKE '%${query}%'
					OR r.id IN (
						SELECT DISTINCT restaurant_id
						FROM menu
						WHERE name LIKE '%${query}%'
					)
				)
			</if>
		</trim>
		<trim prefix="order by" prefixOverrides="AND | OR">
			<if test="filter != null">
				${filter}
			</if>
		</trim>
		limit #{offset}, #{size}

	</select>

   <insert id="add" parameterType = "Restaurant">
      insert into restaurant(top_category_id, category_id, name, img, intro, address, operating_time, contact_number)
      values(#{topCategoryId}, #{categoryId}, #{name}, #{img}, #{intro}, #{address}, #{operatingTime}, #{contactNumber})
   </insert>

	<update id="update" parameterType="Restaurant">
        update restaurant
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="img != null">img = #{img},</if>
            <if test="intro != null">intro = #{intro},</if>
            <if test="address != null">address = #{address},</if>
            <if test="operatingTime != null">operating_time = #{operatingTime},</if>
            <if test="contactNumber != null">contact_number = #{contactNumber}</if>
        </set>
        where id = #{id}        
    </update>

    <select id="getRanking" resultType="RestaurantRankView">
        SELECT *
        FROM restaurant_rank_view
        <if test="categoryId != null">
            WHERE category_id = #{categoryId}
        </if>
        ORDER BY value DESC
            LIMIT #{offset}, #{size}
    </select>

   <select id="findAllRestaurant" resultType="Restaurant">
      select * from restaurant
   </select>

	<select id="findRankAll" resultType="RestaurantRankView">
		select * from restaurant_rank_view order by value desc
		<if test="size != null">
			limit #{size}
		</if>
	</select>

	<select id="findReviewAll" resultType="Review">
		select * from review_list_view where restaurant_id = #{restaurantId}
		limit #{offset}, #{size}
	</select>



</mapper>