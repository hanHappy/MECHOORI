<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mechoori.web.repository.RestaurantRepository">
   <select id="findById" resultType="Restaurant">
      select * 
      from restaurant
      where id = #{restaurantId}
   </select>

	<select id="findViewById" resultType="RestaurantView">
		select * 
		from restaurant_view
		where id = #{restaurantId}
	</select>

	<select id="findAllRestaurantView" resultType="RestaurantView">
		SELECT
		r.*,
		ROUND(m.avg_rated_price, -2) AS avg_rated_price,
		ROUND(m.avg_price, -2) AS avg_price,
		CASE
			WHEN m.avg_price &gt; 0 THEN ROUND((m.avg_rated_price / m.avg_price) * 100)
			ELSE 0
		END AS value,
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(l.likes, 0) AS `like`,
		COALESCE(r2.rate_count, 0) AS rate_count,
		COALESCE(r2.rate, 0) AS rate
	FROM
		restaurant AS r
	LEFT JOIN
		(
			SELECT
				menu.restaurant_id,
				AVG(menu.rated_price) AS avg_rated_price,
				AVG(menu.price) AS avg_price
			FROM
				menu
			GROUP BY
				menu.restaurant_id
		) AS m ON r.id = m.restaurant_id
	LEFT JOIN
		(
			<if test="memberId !=null">
			SELECT
				restaurant_id,
				COUNT(*) AS like_count,
				COUNT(CASE WHEN member_id = #{memberId} THEN 1 END) AS likes
			</if>	
			FROM
				restaurant_liked
			GROUP BY
				restaurant_id
		) AS l ON r.id = l.restaurant_id
	LEFT JOIN
		(
			<if test="memberId !=null">
			SELECT
				menu.restaurant_id,
				COUNT(*) AS rate_count,
				0 AS rate
			</if>
			FROM
				menu
			INNER JOIN
				rate ON menu.id = rate.menu_id
			GROUP BY
				menu.restaurant_id
		) AS r2 ON r.id = r2.restaurant_id;
	</select>

	<select id="findAll" resultType="Restaurant">
		select *
		from restaurant
		<trim prefix="where" prefixOverrides="AND|OR">
			<if test="categoryId != null">
				category_id = #{categoryId};
			</if>
			<if test="query != null">
				name like '%${query}%'
			</if>
		</trim>
		<if test="page != null">
			limit #{page}, #{size}
		</if>
	</select>

	<select id="findAllRestaurantView" resultType="RestaurantView">
		<if test="memberId == null">
			select
				r.*,
				0 `like`,
				0 rate
			from restaurant_view r
		</if>
		<if test="memberId != null">
			SELECT r.*,
				IF(rl.restaurant_id IS NOT NULL, 1, 0) AS `like`,
				IFNULL(rt.rate_count, 0) AS rate
			FROM restaurant_view r
			LEFT JOIN (
				SELECT
					DISTINCT restaurant_id
				FROM restaurant_like
				WHERE member_id = #{memberId}
			) rl ON r.id = rl.restaurant_id
			LEFT JOIN (
				SELECT
					menu.restaurant_id,
					COUNT(rate.member_id) AS rate_count
				FROM menu
				LEFT JOIN rate ON menu.id = rate.menu_id AND rate.member_id = #{memberId}
				GROUP BY menu.restaurant_id) rt ON r.id = rt.restaurant_id
		</if>
		<trim prefix="where" prefixOverrides="AND|OR">
			<if test="topCategoryId != null">
				r.top_category_id = #{topCategoryId}
			</if>
			<if test="categoryId != null">
				r.category_id = #{categoryId}
			</if>
			<if test="query != null">
				(
					r.name LIKE '%${query}%'
					OR r.id IN (
						SELECT DISTINCT restaurant_id
						FROM menu
						WHERE name LIKE '%${query}%'
					)
				)
			</if>
		</trim>
		<trim prefix="order by" prefixOverrides="AND | OR">
			<if test="filter != null">
				${filter}
			</if>
		</trim>
		
	</select>

	<insert id="add" parameterType = "Restaurant">
		insert into restaurant(top_category_id, category_id, name, img, intro, address, operating_time, contact_number)
		values(#{topCategoryId}, #{categoryId}, #{name}, #{img}, #{intro}, #{address}, #{operatingTime}, #{contactNumber})
	</insert>

<!--	<select id="getRanking" resultType="RestaurantView">-->
<!--		SELECT *-->
<!--		from restaurant_view-->
<!--		<if test="categoryId != null">-->
<!--		where category_id = #{categoryId}-->
<!--		</if>-->
<!--		ORDER BY value DESC-->
<!--	</select>-->

<select id="getRanking" resultType="RestaurantView">
	SELECT *,
	(SELECT COUNT(*)
	FROM (SELECT *
	FROM restaurant_view
	<if test="categoryId != null">
		WHERE category_id = #{categoryId}
	</if>
	ORDER BY value DESC) AS subquery
	WHERE subquery.value >= restaurant_view.value) AS rank
	FROM restaurant_view
	ORDER BY value DESC
		</select>

	<select id="findAllRestaurant" resultType="Restaurant">
		select * from restaurant
	</select>




</mapper>